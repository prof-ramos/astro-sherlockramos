---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getContentManager } from '../../services/content-manager';
import FormattedDate from '../../components/FormattedDate.astro';

// Tentar buscar posts do Strapi, fallback para conteúdo estático se falhar
let posts = [];
let categories = [];
let error = null;
let useStrapi = false;

try {
  const contentManager = getContentManager();

  // Verificar conexão com Strapi
  const isConnected = await contentManager.healthCheck();

  if (isConnected) {
    // Buscar posts do Strapi
    const result = await contentManager.getPostsForHomePage(1, 10);
    posts = result.posts.map(post => contentManager.formatPostForDisplay(post));
    categories = await contentManager.getCategories();
    useStrapi = true;
  } else {
    throw new Error('Strapi não conectado');
  }
} catch (err) {
  console.error('Erro ao conectar com Strapi:', err);
  error = err.message;
  useStrapi = false;

  // Fallback: usar conteúdo estático se disponível
  try {
    const { getCollection } = await import('astro:content');
    const staticPosts = await getCollection('blog');
    posts = staticPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
  } catch (fallbackError) {
    console.error('Erro no fallback para conteúdo estático:', fallbackError);
    posts = [];
  }
}
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			main {
				width: 960px;
			}
			ul {
				display: flex;
				flex-wrap: wrap;
				gap: 2rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			ul li {
				width: calc(50% - 1rem);
			}
			ul li * {
				text-decoration: none;
				transition: 0.2s ease;
			}
			ul li:first-child {
				width: 100%;
				margin-bottom: 1rem;
				text-align: center;
			}
			ul li:first-child img {
				width: 100%;
			}
			ul li:first-child .title {
				font-size: 2.369rem;
			}
			ul li img {
				margin-bottom: 0.5rem;
				border-radius: 12px;
			}
			ul li a {
				display: block;
			}
			.title {
				margin: 0;
				color: rgb(var(--black));
				line-height: 1;
			}
			.date {
				margin: 0;
				color: rgb(var(--gray));
			}
			ul li a:hover h4,
			ul li a:hover .date {
				color: rgb(var(--accent));
			}
			ul a:hover img {
				box-shadow: var(--box-shadow);
			}
			@media (max-width: 720px) {
				ul {
					gap: 0.5em;
				}
				ul li {
					width: 100%;
					text-align: center;
				}
				ul li:first-child {
					margin-bottom: 0;
				}
				ul li:first-child .title {
					font-size: 1.563em;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<section>
				<ul>
					{
						useStrapi ? (
							// Renderizar posts do Strapi
							(posts as any[]).map((post) => (
								<li>
									<a href={`/blog/${post.id}/`}>
										<img width={720} height={360} src={post.heroImageUrl} alt="" />
										<h4 class="title">{post.title}</h4>
										<p class="date">
											<FormattedDate date={post.publishedDate} />
										</p>
									</a>
								</li>
							))
						) : (
							// Renderizar posts estáticos
							(posts as any[]).map((post) => (
								<li>
									<a href={`/blog/${post.id}/`}>
										<img width={720} height={360} src={post.data.heroImage} alt="" />
										<h4 class="title">{post.data.title}</h4>
										<p class="date">
											<FormattedDate date={post.data.pubDate} />
										</p>
									</a>
								</li>
							))
						)
					}
				</ul>
			</section>
		</main>
		<Footer />
	</body>
</html>
